CECS 343 8/27/2020

Chapter 1 -- What is Software Engineering?

1)Why is development time so long?
	-bugs
	-building the wrong thing (you didn't get the info right when figuring out what you should build)
		>Create a Spec document when you determine what it is you should build
	-process info = 1M to 1T Bits & ise it to control execution paths
	-Factor of 1,000 to 1B more complex than other kinds of engineering
		How to Fix? (best to use "agile development")
		- ***Simplify Execution Paths (Avoid Surprise)
			>example of exec path: "if-then-else"
			>controlled by the values in more than one variable
		- Reduce Complexity of Data flowing between "Boxes" (aka reduce # of interconnections)
			>at any given level when looking at your progam, you want that part to look simple
			>Box: a group of code that has a defined inteface connected to it
		- Reduce # of Data Paths
2)Why are development costs high?
	-hard to predict/estimate effort due to complexity (& unforeseen bugs)
	-labor intensive
	-* most effort is in find/fix RUNTIME bugs
	-*** Big percentage of projects fail
3)Why are there bugs in completed programs?
	-# of pathway combinations too big to test, ever. 
4)Why do we maintain existing (aka "Legacy") programs for so long? (aka "cash cows")
	-we don't want to spend the money to re-write since eventually they will lose their use
	-It works, so why bother
5)Why is it hard to measure development progress?
	-WBS helps a lot
		>Your list of tasks and subtasks
		>"Work Breakdown Structure"
	-"90-90" rule
		>80% overun
		>After 90% of the time(say you've built 90% of the software), you've actually done only 50%, 
		 you have another 90% left (this is where you find most of the RT bugs
	-*** Most metrics[measurements] are poor & have (hidden) giant "error bar"
6)When is the development of a new type of program (New-Dev) easy and low risk?
	-use specialty-area "framework" (or "library") where your "PGM" is reduced to simple "biz logic"
		1. you write 10-15% of the total code
		2. framework is "preview"
		3. need your PBM to be VERY CLOSE to speciality-area
Ch 1.1.2 Application "Domains" (PBM areas)

8 Areas

1) System Programing
	-ex: OS, Network, RTime, Async, Distributed, Parallel
2) App
	-focused biz areas
2.5) "OR" Biz planning
	-"operations research" --> BIZ
3)Engineering/Science (w/ Numeric Accuracy)
4)Embedded
	-"IoT" (Robotics)
		>IoT = Internet of Things
5)"SPL" = S/W Product Line
	-Large core (the "framework") & small plug-in (Add-on) variations (features)
6)WEB/Mobile Apps (Games)
	-Sub-Apps Area
7)AI (robotics)
	-ML = machine learning
	-data mining
[8]Legacy
	-"Screen Scraping"

Chapter 2 -- Software Development Methodologies

"The [S/W] Process Framework"

These 5 phases belong to every software engineering methodology.


5 "Phases" (may overlap)
     |  /0. Pre-Contract/- Initial effort that you pay for
     |  1. Communication - Understand the customers objectives
                           for the project and to gather the
                           requirements that help define
                           software features and functions.
     |  2. Planning      - Also called a software project plan.
                           Describes the technical tasks that
                           need to be done, the risks, resources
                           work products and work schedule.
     |  3. Modeling/Architecture Design - Create models to
                                          better understand 
                                          software requirements
                                          and the design that
                                          will achieve those
                                          requirements.
     |  4. Build
                                         - produce actual code
                                           and the tests to 
                                           uncover bugs in
                                           that code.

     |  5. Deploy/Ship                   - delivered to the customer 
                                           who evaluates the
                                           product and provides
                                           feedback.

**Project Triangle also known as the iron triangle --> For project "Feasibility" (Go/No-Go Decision)

"can we and should we do the project"

BETTER	    /\ FASTER
Features/  /  \   Timeline/
Scope	  /    \    Deadline
   	     /______\
     	  Resources
	    Effort/Cost
Scope(what must be built)
Schedule(swhen it must be built by)
Resources(how much does it cost)

-1- Communication/ Requests(Arch)
	-customer = is the one who pays for the program
	-user = plays with program
	-SME = Subject matter expert(smart user)

example of customer vs user(siska example):
You live in your mom's basement and your mom buys you
something from fry's electronic she's the customer and 
your are the user.

-2- Planning
	-WBS
	-Task Dependencies
	->GANTT Chart(chart that lists all the tasks)
		>WBS as task per row
		-a spreadsheet
	-Assigned tasks to members
-3- Modeling/architecture Design
    analysis(ooa) ie objected-oriented analysis
-4- Build
    -Detailed Design of medium-sized boxes
    -Unit Design
    -Unit Code
    -Unit Test 
    -Small-scale integration testing

It's a triangle because changing one leg of the triangle might
change the leg of another.

ACRONYMS/Definitions covered in this lecture(alphabetical order):
GANTT Chart:chart that list all the tasks. Task per row
and the time it will take to finish the time, usually
organized in a speadsheet.
OOA(Object Oriented Analysis): the 3rd phase of any
software engineering methodology; it is the process of discovery where a development team understands and models the requirements of the system
-RfP(request for proposal): "propose for us what you think
we should do because we want this things within this timeline"
-RfQ(request for quotation): Company provides a set of features
and timeline for a project and then invites companies to bid
for a contract.
-SME(subject-matter expert): smart user
-WBS (work-breakdown structure): breaks the work down into a structure.

Take the entire work of a project and break it down into
substantial chunks. takes those chunks and break it down into
its principal components. continously iterate until at a the lowest level we have a single coherent task that a person
could fully understand.

example of WBS: GANTT chart
